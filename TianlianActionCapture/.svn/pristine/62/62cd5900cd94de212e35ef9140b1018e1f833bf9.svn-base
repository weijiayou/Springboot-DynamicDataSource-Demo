package com.tianlian.server.configs;

import java.lang.reflect.Method;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

@Aspect
//@Component
@Configuration
public class DynamicDataSourceAspect {
  private static final Logger logger = LoggerFactory.getLogger(DynamicDataSourceAspect.class);

  @Before("@annotation(DS)")
  public void beforeSwitchDS(JoinPoint point) {
    System.out.println("-----------------------");
    //获得当前访问的class
    Class<?> className = point.getTarget().getClass();

    //获得访问的方法名
    String methodName = point.getSignature().getName();
    //得到方法的参数的类型
    Class[] argClass = ((MethodSignature) point.getSignature()).getParameterTypes();
    DatabaseType dataSource = DataSourceContextHolder.DEFAULT_DS;
    try {
      // 得到访问的方法对象
      Method method = className.getMethod(methodName, argClass);

      method.setAccessible(true);
      // 判断是否存在@DS注解
      if (method.isAnnotationPresent(DS.class)) {
        DS annotation = method.getAnnotation(DS.class);
        // 取出注解中的数据源名
        dataSource = annotation.value();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    // 切换数据源
    DataSourceContextHolder.setDatabaseType(dataSource);
    System.out.println("-----------------------");
  }


//  @After("@annotation(DS)")
//  public void afterSwitchDS(JoinPoint point) {
//
//    DataSourceContextHolder.clearDatabaseType();
//
//  }

//  @Around("@annotation(DS)")
//  public void around(ProceedingJoinPoint point) throws Throwable {
//    System.out.println("已经记录下操作日志@Around 方法执行前");
//    //获得当前访问的class
//    Class<?> className = point.getTarget().getClass();
//
//    //获得访问的方法名
//    String methodName = point.getSignature().getName();
//    //得到方法的参数的类型
//    Class[] argClass = ((MethodSignature) point.getSignature()).getParameterTypes();
//    DatabaseType dataSource = DataSourceContextHolder.DEFAULT_DS;
//    try {
//      // 得到访问的方法对象
//      Method method = className.getMethod(methodName, argClass);
//
//      method.setAccessible(true);
//      // 判断是否存在@DS注解
//      if (method.isAnnotationPresent(DS.class)) {
//        DS annotation = method.getAnnotation(DS.class);
//        // 取出注解中的数据源名
//        dataSource = annotation.value();
//      }
//    } catch (Exception e) {
//      e.printStackTrace();
//    }
//
//    // 切换数据源
//    DataSourceContextHolder.setDatabaseType(dataSource);
//    point.proceed();
//    System.out.println("已经记录下操作日志@Around 方法执行后");
//  }
}
